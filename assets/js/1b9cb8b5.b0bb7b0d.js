(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{125:function(e,n,t){"use strict";var a=t(0),i=t.n(a),s=t(122),l=t(107),o=t(62),r=t.n(o);var c=37,u=39;n.a=function(e){var n=e.lazy,t=e.block,o=e.defaultValue,p=e.values,m=e.groupId,b=e.className,d=Object(s.a)(),h=d.tabGroupChoices,v=d.setTabGroupChoices,g=Object(a.useState)(o),f=g[0],k=g[1],j=a.Children.toArray(e.children),O=[];if(null!=m){var w=h[m];null!=w&&w!==f&&p.some((function(e){return e.value===w}))&&k(w)}var N=function(e){var n=e.target,t=O.indexOf(n),a=j[t].props.value;k(a),null!=m&&(v(m,a),setTimeout((function(){var e,t,a,i,s,l,o,c;(e=n.getBoundingClientRect(),t=e.top,a=e.left,i=e.bottom,s=e.right,l=window,o=l.innerHeight,c=l.innerWidth,t>=0&&s<=c&&i<=o&&a>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(r.a.tabItemActive),setTimeout((function(){return n.classList.remove(r.a.tabItemActive)}),2e3))}),150))},x=function(e){var n,t;switch(e.keyCode){case u:var a=O.indexOf(e.target)+1;t=O[a]||O[0];break;case c:var i=O.indexOf(e.target)-1;t=O[i]||O[O.length-1]}null===(n=t)||void 0===n||n.focus()};return i.a.createElement("div",{className:"tabs-container"},i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":t},b)},p.map((function(e){var n=e.value,t=e.label;return i.a.createElement("li",{role:"tab",tabIndex:f===n?0:-1,"aria-selected":f===n,className:Object(l.a)("tabs__item",r.a.tabItem,{"tabs__item--active":f===n}),key:n,ref:function(e){return O.push(e)},onKeyDown:x,onFocus:N,onClick:N},t)}))),n?Object(a.cloneElement)(j.filter((function(e){return e.props.value===f}))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},j.map((function(e,n){return Object(a.cloneElement)(e,{key:n,hidden:e.props.value!==f})}))))}},126:function(e,n,t){"use strict";var a=t(0),i=t.n(a);n.a=function(e){var n=e.children,t=e.hidden,a=e.className;return i.a.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},78:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return m}));var a=t(3),i=t(7),s=(t(0),t(111)),l=t(125),o=t(126),r={title:"Pipeline",slug:"/pipeline"},c={unversionedId:"StackTech/pipeline",id:"StackTech/pipeline",isDocsHomePage:!1,title:"Pipeline",description:"Deux pipelines ont \xe9t\xe9 mises en place pour r\xe9pondre \xe0 trois objectifs :",source:"@site/docs/StackTech/pipeline.mdx",slug:"/pipeline",permalink:"/UnlabeledProject/docs/pipeline",editUrl:"https://github.com/batleforc/UnlabeledProject/edit/doc/docs/StackTech/pipeline.mdx",version:"current",sidebar:"docs",previous:{title:"Mise en place de l'environnement",permalink:"/UnlabeledProject/docs/setup"}},u=[{value:"Pipeline Principale =&gt; Release",id:"pipeline-principale--release",children:[]},{value:"Pipeline Secondaire =&gt; Documentation",id:"pipeline-secondaire--documentation",children:[]}],p={toc:u};function m(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Deux pipelines ont \xe9t\xe9 mises en place pour r\xe9pondre \xe0 trois objectifs :"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"La pipeline principale :",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"S'assurer que la solution sois capable de compiler en cas de push."),Object(s.b)("li",{parentName:"ul"},"Compiler la solution sur plusieurs plateforme en cas de Tag."))),Object(s.b)("li",{parentName:"ul"},"La pipeline secondaire :",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"D\xe9ployer la documentation.")))),Object(s.b)("p",null,"A terme une troisi\xe8me Pipeline seras mise en place. Celle-ci aura pour but de d\xe9ployer en cas de tag une nouvelle version du serveur en production."),Object(s.b)("p",null,"Chaque Pipeline est mise en place via le syst\xe8me Github Action."),Object(s.b)("h3",{id:"pipeline-principale--release"},"Pipeline Principale => Release"),Object(s.b)("img",{src:"https://www.plantuml.com/plantuml/png/TP11IaCn48RtdkBVgM0lu48G5JUkYY0kf-cq3IIJa6ImLwhNU1TpalTe4NGva-__PYO0kPOAFfDU0PAsZ5VV3hfvTCqd-TspohZLwc6fSO-NtOvTKuOAN8hHDuEMrmiuomn_vaXYld3Dn-daTBHxJSW-S_32v_mI-iFob6BsOQHg2hCa9oruywB7EtnusQQl2cx8h9Y-Ms54ShYf7e4h5fEmvSKWCbPGjRW3bJtV_h-3JLzpircMxQOodQg6HgtsCznOZ4R6X8v6zvtsVHLdB9V-KPkIr8SmdruuC5N-0G00",alt:"pipelinePrincipal"}),Object(s.b)(l.a,{values:[{label:"Windows",value:"win"},{label:"Linux",value:"linux"},{label:"Mac",value:"mac"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"win",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},"name: Win:Build/release\n\non: push\n\njobs:\n  release:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [windows-latest]\n\n    steps:\n      - name: Check out Git repository\n        uses: actions/checkout@v1\n\n      - name: Install Node.js, NPM and Yarn\n        uses: actions/setup-node@v1\n        with:\n          node-version: 14\n      - name : set vs version\n        run : npm config set msvs_version 2015\n          # Choix de la version 2015 pour \xeatre compatible avec le package sodium\n      - name : install d\xe9pendances\n        run : npm install --global windows-build-tools@4.0.0 --vs2015\n          # Installation des package n\xe9cessaires a la compilation\n\n      - name: Build/release Electron app\n        uses: samuelmeuli/action-electron-builder@v1\n        with:\n          args: -c.snap.publish=github\n          # GitHub token, automatically provided to the action\n          # (No need to define this secret in the repo settings)\n          github_token: ${{ secrets.github_token }}\n\n          # If the commit is tagged with a version (e.g. \"v1.0.0\"),\n          # release the app after building\n          release: ${{ startsWith(github.ref, 'refs/tags/v') }}\n"))),Object(s.b)(o.a,{value:"linux",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},"name: Linux:Build/release\n\non: push\n\njobs:\n  release:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n\n    steps:\n      - name: Check out Git repository\n        uses: actions/checkout@v1\n\n      - name: Install Node.js, NPM and Yarn\n        uses: actions/setup-node@v1\n        with:\n          node-version: 14\n\n      - name: Build/release Electron app\n        uses: samuelmeuli/action-electron-builder@v1\n        with:\n          args: -c.snap.publish=github\n          # GitHub token, automatically provided to the action\n          # (No need to define this secret in the repo settings)\n          github_token: ${{ secrets.github_token }}\n\n          # If the commit is tagged with a version (e.g. \"v1.0.0\"),\n          # release the app after building\n          release: ${{ startsWith(github.ref, 'refs/tags/v') }}\n"))),Object(s.b)(o.a,{value:"mac",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},"name: Mac:Build/release\n\non: push\n\njobs:\n  release:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [macos-latest]\n\n    steps:\n      - name: Check out Git repository\n        uses: actions/checkout@v1\n\n      - name: Install Node.js, NPM and Yarn\n        uses: actions/setup-node@v1\n        with:\n          node-version: 14\n      - name: Install libmpeg\n        run : brew install libtool\n        # Installation de la librarie libtool n\xe9cessaires a l'uttilisation de ffmpeg (SoundBoard)\n      - name: Install autoMake pour Libsodium\n        run : brew install automake\n        # Installation de la librarie automake, n\xe9cessaire a la compilation des package electron\n      - name: Build/release Electron app\n        uses: samuelmeuli/action-electron-builder@v1\n        with:\n          args: -c.snap.publish=github\n          # GitHub token, automatically provided to the action\n          # (No need to define this secret in the repo settings)\n          github_token: ${{ secrets.github_token }}\n\n          # If the commit is tagged with a version (e.g. \"v1.0.0\"),\n          # release the app after building\n          release: ${{ startsWith(github.ref, 'refs/tags/v') }}\n")))),Object(s.b)("p",null,"L'action Github ",Object(s.b)("em",{parentName:"p"},"samuelmeuli/action-electron-builder@v1"),", permet de compiler une solution electron."),Object(s.b)("h3",{id:"pipeline-secondaire--documentation"},"Pipeline Secondaire => Documentation"),Object(s.b)("img",{src:"https://www.plantuml.com/plantuml/png/TOun3i8m34LtJl4tfbw00Ga4OcLbJ5stZPJ6LH9BN8bpS35CYK18CFwl_vuDE2gIS15T0L4wnicNKTiT5I_nkxDakwRPremDZdtFL9IX4IJJv0ko9WI7Dhb88peXm-h-Wxxq9ZZmvA9T26k-tc-aI_tC3hEVEVZ8Rxv2FonxzQ6hM9PGBKAQdIRD_mt6dZNRcufsSNn_FupDx0RE3m00",alt:"doc"}),Object(s.b)(l.a,{values:[{label:"Doc",value:"doc"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"doc",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-yaml"},"name: documentation\n\non:\npull_request:\n  branches: [doc]\npush:\n  branches: [doc]\n\njobs:\nchecks:\n  if: github.event_name != 'push'\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v1\n    - uses: actions/setup-node@v1\n      with:\n        node-version: '12.x'\n    - name: Test Build\n      run: |\n        if [ -e yarn.lock ]; then\n        yarn install --frozen-lockfile\n        elif [ -e package-lock.json ]; then\n        npm ci\n        else\n        npm i\n        fi\n        npm run build\ngh-release:\n  if: github.event_name != 'pull_request'\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v1\n    - uses: actions/setup-node@v1\n      with:\n        node-version: '12.x'\n    - uses: webfactory/ssh-agent@v0.5.1\n      with:\n        ssh-private-key: ${{ secrets.GH_PAGES_DEPLOY }}\n    - name: Release to GitHub Pages\n      env:\n        USE_SSH: true\n        GIT_USER: git\n      run: |\n        git config --global user.email \"actions@github.com\"\n        git config --global user.name \"gh-actions\"\n        if [ -e yarn.lock ]; then\n        yarn install --frozen-lockfile\n        elif [ -e package-lock.json ]; then\n        npm ci\n        else\n        npm i\n        fi\n        npm run deploy\n")))),Object(s.b)("p",null,"Cette pipeline permet la compilation de la doc docusaurus et son d\xe9ploiement automatique sur github Pages (Ceux sur quoi vous \xeates actuellement)."))}m.isMDXComponent=!0}}]);